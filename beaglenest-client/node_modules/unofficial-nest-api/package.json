{
  "name": "unofficial-nest-api",
  "description": "A simple API for accessing the very unofficial Nest thermostat APIs",
  "author": {
    "name": "Aaron",
    "email": "npm@wiredprairie.us",
    "url": "http://www.wiredprairie.us"
  },
  "main": "lib/index.js",
  "license": "BSD",
  "repository": {
    "type": "git",
    "url": "https://github.com/wiredprairie/unofficial_nodejs_nest.git"
  },
  "version": "0.1.4",
  "private": false,
  "dependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "Unofficial Nest API on Node\r\n===========================\r\n\r\nThis is a **very unofficial** demonstration of the API used by Nest Thermostats.\r\n\r\nFor more information about the unofficial API and communication check [here](http://www.wiredprairie.us/blog/index.php/archives/1754).\r\n\r\nThe file, app.js included demonstrates one way to use the API.\r\n\r\nTo use it as is:\r\n\r\n* Install Node from http://nodejs.org\r\n* Install the unofficial Nest Thermostat API:\r\n\r\n    `npm install unofficial-nest-api`\r\n    \r\n* Run:\r\n    \r\n    `node app.js 'NESTUSERNAME' 'NESTPASSWORD'`\r\n\r\nTo set the temperature, you'll need to login, and fetch the status once before calling the setTemperature function:\r\n\r\n    nest.login(username, password, function (err, data) {\r\n        if (err) {\r\n            console.log(err.message);\r\n            process.exit(1);\r\n            return;\r\n        }\r\n        nest.fetchStatus(function (data) {\r\n            for (var deviceId in data.device) {\r\n                if (data.device.hasOwnProperty(deviceId)) {\r\n                    var device = data.shared[deviceId];\r\n                    // here's the device and ID\r\n                    nest.setTemperature(deviceId, nest.ftoc(70));\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\nThe example above sets the temperature of every thermostat in current structure to 70F.\r\n\r\nAlso, note that the subscribe function may not return results frequently. It's based on the data coming from your\r\nthermostats, which may not change frequently. There's a default 60 second timeout. The callback is always called,\r\nwhich then gives your code an opportunity to call subscribe again.\r\n\r\nThere are a handful of provided functions:\r\n\r\n* `setTemperature(thermostatID, temperature)`\r\n* `setTemperature(temperature)` => defaults to first device (only use this if you have one thermostat)\r\n* `setAway(structureID [optional, default = first structure], away [optional, default=true])`\r\n* `setHome(structureID [optional, default = first structure])`\r\n* `setFanModeAuto(deviceID [optional, default = first device])`\r\n* `setFanModeOn(deviceID [optional, default = first device])`\r\n* `setTargetTemperatureType(deviceID [optional, default = first device], temperatureType ['cool','heat','range'])`\r\n* `ctof` => Celsius to Fahrenheit\r\n* `ftoc` => Fahrenheit to Celsius\r\n* `getStructureId` => returns the first structure Id found\r\n* `getStructureIds` => returns all structure Ids, as an array\r\n* `getDeviceIds` => returns all device Ids, as an array\r\n",
  "readmeFilename": "readme.md",
  "_id": "unofficial-nest-api@0.1.4",
  "dist": {
    "shasum": "39d6469d47a4f2000945ebb1dc4129f0f0701c63"
  },
  "_from": "unofficial-nest-api@",
  "_resolved": "https://registry.npmjs.org/unofficial-nest-api/-/unofficial-nest-api-0.1.4.tgz"
}
